# Функция вычисления факториала N!
def Factorial(n):
	# Результат вычислений (значение факториала)
	result = 1.0
	# Факториал 0!=1, 1!=1, поэтому начинать от 2!
	if n > 1:
		# Умножать (n-1)-раз на счётчик
		k = 2
		while k <= n:
			result = result * k
			k = k + 1
	# Вернуть результат
	return result

# Функция вычисления целой степени X^N
def Power(x, n):
	# Признак знака степени
	divide = False
	# Результат вычислений
	result = 1.0
	# Если степень отрицательна
	if n < 0:
		# Запомнить знак и взять модуль
		divide = True
		n = -n
	# Умножать n-раз на аргумент
	k = 1
	while k <= n:
		result = result * x
		k = k + 1
	# Вернуть результат, если степень положительна, или вернуть
	# единицу делить на результат, если степень отрицательна
	if divide == True : result = (1 / result)
	return result

# Функция вычисления формулы
def Calculate(m):
	# Счётчик итераций (номер элемента ряда)
	i = 1
	# Знак элемента ряда
	if m%2==0:
	    z = 1
	else:
	    z = -1
	# Значение суммы элементов ряда (результат)
	result = 0.0
	# Вычислять сумму элементов, пока счётчик не дошёл до последнего
	while i <= m:
		# Вычислить следующий элемент ряда и прибавить его к сумме
		result += (Factorial(m - i)+Power(m-i,2)) / (Power(i, 2)-Factorial(i+1)) * z
		# Изменить знак элемента на противоположный
		z = z * (-1)
		# Увеличить счётчик итераций
		i = i + 1
	# Вернуть результат
	return result

# Главная функция реализует интерфейс с пользователем
def main():
	# Инициализация переменных
	Yes = 'да'
	# Цикл ввода значений
	while Yes == 'да' or Yes == 'yes':
		# Ввод числа
		value = int(input('Введите число [1..12]:>'))
		if value < 1 or value > 12: print(' - некорректное значение')
		else:
			# Вычислить и вывести результат
			result = Calculate(value)
			print('Результат (', value, ') = ', result)
		print()
		# Подтверждение ввода нового значения
		Yes = input('Повторить ввод [да|yes]:>')
		Yes = Yes.lower()
		print()

# Запуск главной функции
if __name__ == '__main__':
	main()
